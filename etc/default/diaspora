export RAILS_ENV=development
DIASPORA_HOME=/usr/local/app/diaspora
THIN_USER=nobody
THIN_GROUP=nogroup
# While waiting for dependent services, don't try more than
# this many times. If the attempts exceeds this number, the
# current run process will exit and it will try again. This
# allows you to better monitor svstat output.
DEFAULT_ATTEMPTS=10

# Wait for service(s), making no more than N attempts to
# connect. If attempts is 0, infinitely loop.
function wait_service() {
	attempts=$DEFAULT_ATTEMPTS
	try=0
	while getopts a: arg; do
		case $arg in
		a)
			attempts="$OPTARG"
			;;
		*)
			echo "Unknown argument '$arg'"
			exit 1
			;;
		esac
	done
	[ $OPTIND -gt 1 ] && shift $((OPTIND-1))

	if [ $# -le 0 ]; then echo "missing service" 1>&2; return 1; fi
	for service in $*; do 
		case $service in
		mongo)
			args="localhost 27017"
		;;
		redis)
			args="localhost 6379"
		;;
		smtp)
			args="localhost 25"
		;;
		web)
			args="localhost 80"
		;;
		websocket)
			args="localhost 8080"
		;;
		*)
			echo "unknown '$service'" 1>&2
			return 2
		;;
		esac
		while ! nc -z $args; do
			try=$((try+1))
			# allows the process to die, svstat ticker resets
			[ $attempts -gt 0 -a $try -gt $attempts ] && exit 126
			echo ${PWD##*/} waiting for $service
			sleep 1
		done
	done
}

function exec_thin() {
	instance=`pwd | sed 's/.*_\([0-9]*\)/\1/'`

	cd $DIASPORA_HOME || return 1

	log=log/thin.$instance.log
	sock=/tmp/thin.$instance.sock

	touch $log || return 2
	chown $THIN_USER:$THIN_GROUP $log || return 3
	chmod 640 $log || return 4

	wait_service mongo web redis websocket

	exec /usr/local/bin/bundle exec thin \
		-l $log \
		-S $sock \
		-u ${THIN_USER:-nobody} \
		-g ${THIN_GROUP:-nogroup} \
		-e ${RAILS_ENV:-development} \
		start 
}
